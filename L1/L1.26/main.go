/*
–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç—Ä–æ–∫–µ
–≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ (—Ç.–µ. —Å—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤).

–í—ã–≤–æ–¥: true, –µ—Å–ª–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã, false, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.
–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π, —Ç.–µ. —Å–∏–º–≤–æ–ª—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö —Å—á–∏—Ç–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏.

–ù–∞–ø—Ä–∏–º–µ—Ä: "abcd" -> true, "abCdefAaf" -> false (–ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è a/A), "aabcd" -> false.

–ü–æ–¥—É–º–∞–π—Ç–µ, –∫–∞–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö —É–¥–æ–±–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è.
*/
package main

import (
	"fmt"
	"math/rand"
	"unicode"
)

func main() {
	sequence := generateSequence(5, 20)
	fmt.Println("–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:", sequence)
	unique, nonUniqueChars := AllCharsUnique(sequence)
	fmt.Println("–í—Å–µ —Å–∏–º–≤–æ–ª—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã?", unique)
	if len(nonUniqueChars) != 0 {
		fmt.Print("–ù–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: ")
		for _, val := range nonUniqueChars {
			fmt.Printf("%c ", val)
		}

	}
}

func AllCharsUnique(str string) (bool, []rune) {
	charMap := make(map[rune]bool)
	var nonUniqueRunes []rune

	for _, char := range str {
		lowerChar := unicode.ToLower(char)

		if charMap[lowerChar] {
			nonUniqueRunes = append(nonUniqueRunes, char)
		}
		charMap[lowerChar] = true
	}

	if len(nonUniqueRunes) != 0 {
		return false, nonUniqueRunes
	} else {
		return true, nil
	}

}

func generateSequence(minElements, maxElements int) string {
	const unicodeChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+{}[]|;:'\",.<>/?`~ü•∫üòÇü•∞üòäüòçüòùü§ó"
	ancientTexts := []rune(unicodeChars)
	var result []rune
	for i := 0; i <= minElements+rand.Intn(maxElements-minElements+1); i++ {
		result = append(result, ancientTexts[rand.Intn(len(ancientTexts)-1)])
	}
	return string(result)
}
