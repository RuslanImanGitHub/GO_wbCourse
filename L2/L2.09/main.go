/*
–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é Go, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—â—É—é –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—É—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã/—Ä—É–Ω—ã.

–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏:

–í—Ö–æ–¥: "a4bc2d5e"
–í—ã—Ö–æ–¥: "aaaabccddddde"

–í—Ö–æ–¥: "abcd"
–í—ã—Ö–æ–¥: "abcd" (–Ω–µ—Ç —Ü–∏—Ñ—Ä ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)

–í—Ö–æ–¥: "45"
–í—ã—Ö–æ–¥: "" (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, —Ç.–∫. –≤ —Å—Ç—Ä–æ–∫–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É)

–í—Ö–æ–¥: ""
–í—ã—Ö–æ–¥: "" (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ -> –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–∞ \:

–í—Ö–æ–¥: "qwe\4\5"
–í—ã—Ö–æ–¥: "qwe45" (4 –∏ 5 –Ω–µ —Ç—Ä–∞–∫—Ç—É—é—Ç—Å—è –∫–∞–∫ —á–∏—Å–ª–∞, —Ç.–∫. —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã)

–í—Ö–æ–¥: "qwe\45"
–í—ã—Ö–æ–¥: "qwe44444" (\4 —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç 4, –ø–æ—ç—Ç–æ–º—É —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ 5)

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–æ—á–Ω—ã–µ —Å–ª—É—á–∞–∏ (–≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ error), –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å unit-—Ç–µ—Å—Ç—ã.

–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º (vet, golint).
*/

package main

import (
	"errors"
	"fmt"
	"math/rand"
	"os"
	"regexp"
	"strconv"
	"strings"
	"unicode"
)

func main() {
	str := generateSequence(10, 20, true)
	fmt.Println(str)
	unpacked, err := unpackSequenceV2(str)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error: %v\n", err)
		os.Exit(1)
	}

	fmt.Println(unpacked)
}

//–ù–µ –º–æ–∂–µ—Ç —Å–æ–±—Ä–∞—Ç—å —Ü–∏—Ñ—Ä—É –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä—É–Ω :(
func unpackSequence(str string) (string, error) {
	if str == "" {
		return "", nil
	}
	alphabetOnly := regexp.MustCompile(`^[a-zA-Z]+$`)
	digitOnly := regexp.MustCompile(`^\d+$`)

	if digitOnly.MatchString(str) {
		return "", errors.New("String contains only digits. String must contain either escape sequence (`\\`) with digits or alphanumeric chars")
	}
	if alphabetOnly.MatchString(str) {
		return  str, nil
	}

	var sb strings.Builder
	sb.Grow(len(str))
	strRunes := []rune(str)
	var prevRune rune
	for _, v := range strRunes {
		if v == '\\' && prevRune != '\\' {
			prevRune = v
			continue
		}
		if v =='\\' && prevRune =='\\'{
			sb.WriteRune(v)
			prevRune = 0
			continue
		}
		if unicode.IsDigit(v) && prevRune == '\\' {
			sb.WriteRune(v)
			prevRune = v
			continue
		}
		if unicode.IsLetter(v) {
			sb.WriteRune(v)
			prevRune = v
			continue
		}
		if unicode.IsDigit(v) && prevRune != '\\' {
			sb.Grow(int(v - '0')-1)
			for range int(v - '0')-1 {
				sb.WriteRune(prevRune)
			}
			prevRune = 0
			continue
		}
	}
	return sb.String(), nil
}

//–ü–æ –æ—â—É—â–µ–Ω–∏—è–º —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–Ω–æ–≥–æ—Å–∏–º–≤–æ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
func unpackSequenceV2(str string) (string, error) {
	if str == "" {
		return "", nil
	}

	alphabetOnly := regexp.MustCompile(`^[a-zA-Z]+$`)
	digitOnly := regexp.MustCompile(`^\d+$`)

	if digitOnly.MatchString(str) {
		return "", errors.New("String contains only digits. String must contain either escape sequence (`\\`) with digits or alphanumeric chars")
	}
	if alphabetOnly.MatchString(str) {
		return  str, nil
	}

	runes := []rune(str)
	var result []rune
	var i int
	var digitCanEscape bool = false

	for i < len(runes) {
		current := runes[i]

		//–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ª—É—á–∞–π –ø–µ—Ä–≤–æ–π —Ü–∏—Ñ—Ä—ã
		if i == 0 && unicode.IsDigit(current) {
			return "", errors.New("String can't start with a digit")
		}

		//–û–±—Ä–∞–±–æ—Ç–∫–∞—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–ª—É—á–∞—è \ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
		if current == '\\' {
			if i+1 < len(runes) {
				i++
				current = runes[i]
				if unicode.IsDigit(current) {
					digitCanEscape = true
				}
				
			} else {
				return "", errors.New("'\\' - single escape sequence can't be the last symbol in a string")
			}
		}

		if !unicode.IsDigit(current) || (unicode.IsDigit(current) && digitCanEscape) {
			//–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–≥–æ—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞!!!
			if i + 1 < len(runes) && unicode.IsDigit(runes[i+1]) {
				j := i+1
				for j < len(runes) && unicode.IsDigit(runes[j]) {
					j++
				}
				numStr := string(runes[i+1 : j])
				number, err := strconv.Atoi(numStr)
				if err != nil {
					return "", err
				}
				if number != 1 {
					for k := 0; k<number; k++ {
						result = append(result, current)
					}
				} else {
					result = append(result, current)
				}
				i=j
			} else {
				result = append(result, current)
				i++
			}
		}

		//–†–µ—Å–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä
		if unicode.IsDigit(current) && digitCanEscape {
			digitCanEscape = false
		}
	}
	return  string(result), nil
}

func generateSequence(minElements, maxElements int, shorter bool) string {
	const unicodeChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+{}[]|;:'\"\\,.<>/?`~ü•∫üòÇü•∞üòäüòçüòùü§ó"
	const shorterChars = "abcdefghijklmnopqrstuvwxyz\\123456789"
	ancientTexts := []rune(unicodeChars)
	if shorter {
		ancientTexts = []rune(shorterChars)
	}
	var result []rune
	for i := 0; i <= minElements+rand.Intn(maxElements-minElements+1); i++ {
		result = append(result, ancientTexts[rand.Intn(len(ancientTexts)-1)])
	}
	return string(result)
}