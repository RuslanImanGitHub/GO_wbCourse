/*
Что выведет программа?

Объяснить вывод программы.
*/
package main

func main() {
	ch := make(chan int)
	go func() {
		for i := range 10 {
			ch <- i
		}
		close(ch) //Канал закрывается
	}()

	for n := range ch {
		println(n)
	}
}

/*
Вывод программы:
0
1
2
3
4
5
6
7
8
9
fatal error: all goroutines are asleep - deadlock!

	В программе выполняется 2 горутины - main и горутина засовывающая числа от 0 до 9 в канал,
в main потом считываются числа из канала.
	Deaalock возникает из-за того, что внутренняя горутина никогда не закрывает канал. Main в
for n := range ch берет числа из канала ch, но т.к. тут range, а канал не закрыт, то main ждет
новых чисел по каналу, но эти числа никогда не возникнут, т.к. внутренняя горутина завершилась.
Детектор дедлоков Go обнаруживает эту ситуацию и паникует.
	Конструкция for n := range ch:
- Читает значения из канала до тех пор, пока канал не будет закрыт
- После закрытия канала цикл завершается
- Если канал никогда не закрывается - цикл блокируется навсегда

	Исправить можно легко - закрыть канал во внутренней горутине, после передачи всех чисел
close(ch)
*/
